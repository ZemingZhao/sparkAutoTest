#!/bin/sh

###############################
###   common function  
###############################
function createReportDir ()
{
  reportDir=$AUTOTOOL_HOME/reports/report-`date +%s`
  mkdir $reportDir
  mkdir $reportDir/logs
  testReport=$reportDir/testReport.txt
  export reportDir
  export testReport
}
function recoverAndExit ()
{
   mv $SPARK_CONF_DIR/spark-env.sh.org.bak $SPARK_CONF_DIR/spark-env.sh
   mv $SPARK_CONF_DIR/spark-defaults.conf.org.bak $SPARK_CONF_DIR/spark-defaults.conf
   mv $SPARK_CONF_DIR/log4j.properties.org.bak $SPARK_CONF_DIR/log4j.properties
   if [ -n $1 ]; then
      exit $1
   else
      exit 0
   fi
}
function writeReportTitle ()
{
  dateBeginRegression=`date`
  echo "---------------------------------------------------------------------"   &>> $testReport
  echo ""  &>> $testReport
  echo "                      Regression Test Report       "   &>> $testReport
  echo ""  &>> $testReport
  echo "---------------------------------------------------------------------"   &>> $testReport
  echo -n "     Ego Version: " &>> $testReport; egosh -V 1>/dev/null 2>> $testReport
  echo  "" >> $testReport
  echo -e "     SparkOnEgo Version: "`$SPARK_HOME/bin/spark-submit --egoversion`  &>> $testReport
  echo -e "     Date: " $dateBeginRegression  &>> $testReport
  echo "---------------------------------------------------------------------"   &>> $testReport
}
function writeCaseResultToReport ()
{
  if [[ "$#" -ne 3 || -z "$1" || -z "$2" || -z "$3" ]]; then
     echo "$1 - $2 - $3"
     echo "usage: $0 Script Reason Result"
     exit 1;
  fi
  echo "--- $1; $2; $3" >> $testReport
}
function writeReportStatistic ()
{
  #could rewrite it with grep -c
  casesPassed=`sed -n '/passed/'p $reportDir/testReport.txt | wc -l`
  casesFailed=`sed -n '/failed/'p $reportDir/testReport.txt | wc -l`
  casesTotal=`expr $casesPassed + $casesFailed`
  if [[ "$casesTotal" -gt "0" ]]; then
     passRate=`awk 'BEGIN{printf "%.2f%%",('$casesPassed' * 100 / '$casesTotal')}'`   
  else
     passRate=0
  fi
  echo "----------------------------------------------------------------------"   &>> $testReport
  echo ""   &>> $testReport
  echo "     Total: $casesTotal" &>> $testReport
  echo "     Passed: $casesPassed" &>> $testReport
  echo "     Failed: $casesFailed" &>> $testReport
  echo "     Pass Rate: $passRate" &>> $testReport
  echo ""   &>> $testReport
  echo "----------------------------------------------------------------------"   &>> $testReport
}
function backupSparkConf ()
{
  cp $SPARK_CONF_DIR/spark-env.sh $SPARK_CONF_DIR/spark-env.sh.org.bak
  cp $SPARK_CONF_DIR/spark-defaults.conf $SPARK_CONF_DIR/spark-defaults.conf.org.bak
  cp $SPARK_CONF_DIR/log4j.properties $SPARK_CONF_DIR/log4j.properties.org.bak
  return 0
}
function recoverAndExit ()
{
   mv $SPARK_CONF_DIR/spark-env.sh.org.bak $SPARK_CONF_DIR/spark-env.sh
   mv $SPARK_CONF_DIR/spark-defaults.conf.org.bak $SPARK_CONF_DIR/spark-defaults.conf
   mv $SPARK_CONF_DIR/log4j.properties.org.bak $SPARK_CONF_DIR/log4j.properties
   if [ -n $1 ]; then
      exit $1 
   else
      exit 0
   fi
}
function printCases ()
{
   ### validation check
   if [[ -z "$1" || -n $2 ]]; then
      echo "error: $0: no dir/file specified."
      exit 1
   elif [[ ! -x $1  ]]; then
      echo "error: $0: $1 has no executable right."
      exit 1
   fi

   if [[ -f $1 ]]; then
      echo "$1"
   elif [[ -d $1 ]]; then
      for item in $1/*; do
          if [[ -d $item && -x $item ]]; then
              printCases $item
           elif [[ -x $item ]]; then
              echo $item
          fi
      done
   fi
}
function createCaseList ()
{
   printCases $1 >>  $reportDir/caseList
}

## configuration
function updateToSparkEnv ()
{
   if [[ "$#" -ne 2 || -z "$1" || -z "$2" ]]; then
      echo "usage: $0 envName envValue"
      echo "please make sure use it after backup customer's conf"
      recoverAndExit 1;
   elif [[ ! -f $SPARK_CONF_DIR/spark-env.sh ]]; then
      echo "error: $0: please make sure $SPARK_CONF_DIR/spark-env.sh is exist."
      recoverAndExit 1;
   fi
   envName=$1
   envValue=$2
   OLD_SETTING_DEF=`cat $SPARK_CONF_DIR/spark-env.sh | grep "^$envName="`
   if [ -z "$OLD_SETTING_DEF" ]; then
       lines=`cat $SPARK_CONF_DIR/spark-env.sh|wc -l`
       if [ $lines -ne 0 ]; then
           sed -i --follow-symlinks "\$a$envName=$envValue" $SPARK_CONF_DIR/spark-env.sh
       else
           echo "$envName=$envValue" >> $SPARK_CONF_DIR/spark-env.sh
       fi
   else
       sed -i --follow-symlinks -e "s#^$envName=#\#$envName=#g" $SPARK_CONF_DIR/spark-env.sh
       sed -i --follow-symlinks "\$a$envName=$envValue" $SPARK_CONF_DIR/spark-env.sh
   fi
}

function updateToSparkDefault ()
{
   if [[ "$#" -ne 2 || -z "$1" || -z "$2" ]]; then
      echo "usage: $0 envName envValue"
      echo "please make sure use it after backup customer's conf"
      recoverAndExit 1;
   elif [[ ! -f $SPARK_CONF_DIR/spark-defaults.conf ]]; then
      echo "error: $0: please make sure $SPARK_CONF_DIR/spark-defaults.conf is exist."
      recoverAndExit 1;
   fi
   envName=$1
   envValue=$2
   #below grep cmd must have a spcace in the end
   OLD_SETTING_DEF=`cat $SPARK_CONF_DIR/spark-defaults.conf | grep "^$envName "`
   if [ -z "$OLD_SETTING_DEF" ]; then
       lines=`cat $SPARK_CONF_DIR/spark-defaults.conf|wc -l`
       if [ $lines -ne 0 ]; then
           sed -i --follow-symlinks "\$a$envName $envValue" $SPARK_CONF_DIR/spark-defaults.conf
       else
          # "$lines -eq 0"
          echo "$envName $envValue" >> $SPARK_CONF_DIR/spark-defaults.conf
       fi
   else
       sed -i --follow-symlinks -e "s#^$envName=#\#$envName=#g" $SPARK_CONF_DIR/spark-defaults.conf
       sed -i --follow-symlinks -e "s#^$envName #\#$envName #g" $SPARK_CONF_DIR/spark-defaults.conf
       sed -i --follow-symlinks "\$a$envName $envValue" $SPARK_CONF_DIR/spark-defaults.conf
   fi
}

function updateToSparkLog4J ()
{
   if [[ "$#" -ne 2 || -z "$1" || -z "$2" ]]; then
      echo "usage: $0 envName envValue"
      echo "please make sure use it after backup customer's conf"
      recoverAndExit 1;
   elif [[ ! -f $SPARK_CONF_DIR/log4j.properties ]]; then
      echo "error: $0: please make sure $SPARK_CONF_DIR/log4j.properties is exist."
      recoverAndExit 1;
   fi
   envName=$1
   envValue=$2
   OLD_SETTING_DEF=`cat $SPARK_CONF_DIR/log4j.properties | grep "^$envName="`
   if [ -z "$OLD_SETTING_DEF" ]; then
       lines=`cat $SPARK_CONF_DIR/log4j.properties|wc -l`
       if [ $lines -ne 0 ]; then
          sed -i --follow-symlinks "\$a$envName=$envValue" $SPARK_CONF_DIR/log4j.properties
       else
          echo "$envName=$envValue" >> $SPARK_CONF_DIR/log4j.properties
       fi
   else
       sed -i --follow-symlinks -e "s#^$envName=#\#$envName=#g" $SPARK_CONF_DIR/log4j.properties
       echo "$envName=$envValue" >> $SPARK_CONF_DIR/log4j.properties
   fi
}

function enableShuffleService ()
{
   updateToSparkDefault "spark.shuffle.service.enabled" "true"
}

function openDebugLog4Tag ()
{
   updateToSparkLog4J "org.apache.spark.util.EGOSparkJsonConfig" "DEBUG"
   updateToSparkLog4J "log4j.logger.org.apache.spark.deploy.master.policy.hierarchy.PolicyHierarchy" "DEBUG"
   updateToSparkLog4J "log4j.logger.org.apache.spark.deploy.master.EGOResourceManager" "DEBUG"
   updateToSparkLog4J "log4j.logger.org.apache.spark.deploy.master.Master" "DEBUG"
}

function configPolicy ()
{
   if [[ "$#" -ne 1 || -z "$1" ]]; then
      echo "error: $0: no policy specified."
      recoverAndExit
   else
      updateToSparkDefault "spark.ego.app.schedule.policy" "$1"
   fi
}

function restartMasterByEgoService ()
{
   currEgosh=`which egosh|grep "egosh$"`
   if [[ -z "$currEgosh" ]]; then
      echo "error: $0: no egosh be found."
      recoverAndExit 1;
   fi
   egosh service stop SPARKMaster; sleep 3; egosh service start SPARKMaster
}

function restartMasterBySparkShell ()
{
   $SPARK_HOME/sbin/stop-master.sh; sleep 3; $SPARK_HOME/sbin/start-master.sh
}

function getPolicyInUse ()
{
   Policy_In_Use=`grep -m1 "Master application schedule policy" $MASTER_LOG| awk -F " " '{print $NF}'`
   export Policy_In_Use;
}

function checkPolicyTakeEffect ()
{
   if [[ "$#" -ne 1 || -z "$1" ]]; then
      echo "error: $0: please specify expectd policy."
      recoverAndExit 1;
   fi
   policyInUse=`grep -m1 "Master application schedule policy" $MASTER_LOG| awk -F " " '{print $NF}'`
   #echo "current policy is $policyInUse."
    
#   if [[ "$policyInUse" == "$1" ]]; then
#      return 1;
#   elif [[ "$policyInUse" != "$1" ]]; then
#      return 0;
#   fi
#   if [ -z "$policyInUse" ]; then
#      echo "no policy get from $MASTER_LOG"
#      recoverAndExit 1;
#   fi
   if [[ "$policyInUse" != "$1" ]]; then
      echo "policy fail to take effect. in use policy is $policyInUse, expected one is $1"
      recoverAndExit 1;
   elif [[ "$policyInUse" == "$1" ]]; then
      echo "policy $policyInUse take effect."
   fi
}
function echoLogInColor ()
{
   if [[ "$#" -ne 2 || -z "$1" || -z "$2" ]]; then
      echo "error: $0: please specify content and color."
      if [[ -n "$1" ]]; then
         echo -e "\\033[31m${1}\\033[0m"
      fi
   else
      echo -e "\\033[${2}m${1}\\033[0m"
  fi
}

